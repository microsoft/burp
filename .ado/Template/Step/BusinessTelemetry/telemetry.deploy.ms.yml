steps:
  - task: PowerShell@2
    name: UpdateDeploymentConfiguration
    displayName: Update Kube Config and App Service Deployment Files
    inputs:
      filePath: "$(Agent.BuildDirectory)/drop/Scripts/Update-TemplateText.ps1"
      workingDirectory: "$(Agent.BuildDirectory)/drop"
      arguments: >
        -FileList @(
          "src\tel-ms-deploy.yml"
        ) 
        -ReplacementList @{
          "[[ACRLoginServer]]" = "$(ACRName).azurecr.io"; 
          "[[IngressCertName]]" = "$(AksIngressCertSecretName)"
        }

  - task: AzureCLI@2
    displayName: SetCosmosDBConnectionString
    inputs:
      azureSubscription: "$(TargetSubscriptionConnection)"
      scriptType: "pscore"
      scriptLocation: "scriptPath"
      ScriptPath: "$(Agent.BuildDirectory)/drop/Scripts/Get-CosmosDB-ConnectionString.ps1"
      workingDirectory: "$(Agent.BuildDirectory)/drop"
      arguments: >
        -ResourceGroupName $(TargetResourceGroupCore) 
        -CosmosDBAccountName $(CosmosDBName)

  - task: DockerCompose@0
    name: BuildTelemetryMicroserviceContainerImage
    displayName: Docker-Compose Build Telemetry Microservice Container Image
    inputs:
      containerregistrytype: "Azure Container Registry"
      azureSubscription: "$(TargetSubscriptionConnection)"
      azureContainerRegistry: "$(ACRNameString)"
      dockerComposeFile: "$(Agent.BuildDirectory)/drop/src/telemetry-microservice/docker-compose-tel-ms-build.yml"
      action: "Build services"
      arguments: >
        --build-arg PORT=$(telemetry-ms-port) 
        --build-arg COSMOS_URI=$(CosmosDBConnectionString)
        --build-arg COSMOS_DATABASE_NAME=$(CosmosDBDatabaseName)
        --build-arg COSMOS_COLLECTION_NAME=$(CosmosDBCollectionName)
      additionalImageTags: "$(Build.BuildId)"

  - task: DockerCompose@0
    name: PushTelemetryMicroserviceContainerImage
    displayName: Docker-Compose Push Telemetry Microservice Container Image
    inputs:
      containerregistrytype: "Azure Container Registry"
      azureSubscription: "$(TargetSubscriptionConnection)"
      azureContainerRegistry: "$(ACRNameString)"
      dockerComposeFile: "$(Agent.BuildDirectory)/drop/src/telemetry-microservice/docker-compose-tel-ms-build.yml"
      action: "Push services"
      additionalImageTags: "$(Build.BuildId)"

  - task: AzureCLI@2
    displayName: Deploy Telemetry Kubernetes Microservice
    condition: or(eq(variables['DeploymentType'], 'AKS'), eq(variables['DeploymentType'], 'Both'))
    inputs:
      azureSubscription: "$(TargetSubscriptionConnection)"
      scriptType: "pscore"
      scriptLocation: "scriptPath"
      ScriptPath: "$(Agent.BuildDirectory)/drop/Scripts/Invoke-Kubectl.ps1"
      workingDirectory: "$(Agent.BuildDirectory)/drop"
      arguments: >
        -ResourceGroupName $(TargetResourceGroupCore) 
        -AKSName $(AksName) 
        -CommandOptions @(
          "apply", 
          "-f", 
          "$(Agent.BuildDirectory)/drop/src/tel-ms-deploy.yml"
        )

  - task: AzureCLI@2
    displayName: SetClusterIP
    inputs:
      azureSubscription: "$(TargetSubscriptionConnection)"
      scriptType: "pscore"
      scriptLocation: "scriptPath"
      ScriptPath: "$(Agent.BuildDirectory)/drop/Scripts/Set-ClusterIP.ps1"
      workingDirectory: "$(Agent.BuildDirectory)/drop"
      arguments: >
        -ResourceGroupName $(TargetResourceGroupCore)
        -AKSName $(AksName)

  - task: AzureCLI@2
    displayName: SetBuildVersions
    condition: or(eq(variables['DeploymentType'], 'AKS'), eq(variables['DeploymentType'], 'Both'))
    inputs:
      azureSubscription: "$(TargetSubscriptionConnection)"
      scriptType: "pscore"
      scriptLocation: "scriptPath"
      ScriptPath: "$(Agent.BuildDirectory)/drop/Scripts/Set-AksDeploymentBuildVersion.ps1"
      workingDirectory: "$(Agent.BuildDirectory)/drop"
      arguments: >
        -ResourceGroupName $(TargetResourceGroupCore) 
        -AKSName $(AksName) 
        -BuildVersion $(Build.BuildNumber)
        -DeploymentNames @(
          "telemetry-microservice"
        )
