steps:
  - checkout: self
    path: CNA
    clean: true
    fetchDepth: 1
# - task: PowerShell@2
#   name: UpdateAppConfig
#   displayName: Update Kube Config and App Service Deployment Files
#   inputs:
#     filePath: 'Scripts/Update-TemplateText.ps1'
#     arguments: >
#       -FileList @(
#         "src\docker-compose-votingapp.yml",
#         "src\azure-vote-all-in-one-redis.yaml",
#         "src\node-api-deploy.yml",
#         "src\node-api-microservice\src\docker-compose-node-api-app-service.yml",
#         "src\tel-ms-deploy.yml"
#       )
#       -ReplacementList @{
#         "[[ACRLoginServer]]" = "$(ACRName).azurecr.io";
#         "[[IngressCertName]]" = "$(AksIngressCertSecretName)"
#       }

# - task: AzureCLI@2
#   displayName: Download AGIC Cert from Key Vault
#   condition: or(eq(variables['DeploymentType'], 'AKS'), eq(variables['DeploymentType'], 'Both'))
#   inputs:
#     azureSubscription: '$(TargetSubscriptionConnection)'
#     scriptType: 'pscore'
#     scriptLocation: 'scriptPath'
#     scriptPath: 'Scripts/Get-AksCert.ps1'
#     arguments: >
#       -KeyVaultName $(KeyVaultName)
#       -CertName $(AGICCertName)
#       -CrtPath $(AGICCrtPath)
#       -KeyPath $(AGICKeyPath)

# - task: AzureCLI@2
#   displayName: Author AGIC Cert Secret for AKS
#   condition: or(eq(variables['DeploymentType'], 'AKS'), eq(variables['DeploymentType'], 'Both'))
#   inputs:
#     azureSubscription: '$(TargetSubscriptionConnection)'
#     scriptType: 'pscore'
#     scriptLocation: 'scriptPath'
#     scriptPath: 'Scripts/New-AksTlsSecretYml.ps1'
#     arguments: >
#       -SecretName $(AksIngressCertSecretName)
#       -KeyPath $(AGICKeyPath)
#       -CrtPath $(AGICCrtPath)
#       -OutputPath $(Build.SourcesDirectory)/cert.yml

# - task: AzureCLI@2
#   displayName: Add Cert to AKS for AGIC
#   condition: or(eq(variables['DeploymentType'], 'AKS'), eq(variables['DeploymentType'], 'Both'))
#   inputs:
#     azureSubscription: '$(TargetSubscriptionConnection)'
#     scriptType: 'pscore'
#     scriptLocation: 'scriptPath'
#     scriptPath: 'Scripts/Invoke-Kubectl.ps1'
#     arguments: >
#       -ResourceGroupName $(TargetResourceGroupCore)
#       -AKSName $(AksName)
#       -CommandOptions @(
#         "apply",
#         "-f",
#         "$(Build.SourcesDirectory)/cert.yml"
#       )

# - task: AzureCLI@2
#   displayName: Deploy Voting App to AKS
#   condition: or(eq(variables['DeploymentType'], 'AKS'), eq(variables['DeploymentType'], 'Both'))
#   inputs:
#     azureSubscription: '$(TargetSubscriptionConnection)'
#     scriptType: 'pscore'
#     scriptLocation: 'scriptPath'
#     scriptPath: 'Scripts/Invoke-Kubectl.ps1'
#     arguments: >
#       -ResourceGroupName $(TargetResourceGroupCore)
#       -AKSName $(AksName)
#       -CommandOptions @(
#         "apply",
#         "-f",
#         "$(System.DefaultWorkingDirectory)/src/azure-vote-all-in-one-redis.yaml"
#       )

# - task: AzureCLI@2
#   displayName: Deploy Node API Kubernetes Microservice
#   condition: or(eq(variables['DeploymentType'], 'AKS'), eq(variables['DeploymentType'], 'Both'))
#   inputs:
#     azureSubscription: '$(TargetSubscriptionConnection)'
#     scriptType: 'pscore'
#     scriptLocation: 'scriptPath'
#     scriptPath: 'Scripts/Invoke-Kubectl.ps1'
#     arguments: >
#       -ResourceGroupName $(TargetResourceGroupCore)
#       -AKSName $(AksName)
#       -CommandOptions @(
#         "apply",
#         "-f",
#         "$(System.DefaultWorkingDirectory)/src/node-api-deploy.yml"
#       )
